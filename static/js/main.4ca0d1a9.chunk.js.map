{"version":3,"sources":["serviceWorker.js","components/card/Card.js","components/card-list/CardList.js","components/SearchBox/SearchBox.js","components/Scroll/Scroll.js","components/ErrorBoundary/ErrorBoundary.js","components/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","robot","className","src","email","alt","name","CardList","robots","map","r","key","id","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetchUsers","then","users","fetch","json","filteredRobots","filter","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kTAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,G,YAZF,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACd,OACC,yBAAKC,UAAU,oDACd,yBAAKC,IAAG,+BAA0BF,EAAMG,MAAhC,YAAiDC,IAAKJ,EAAMK,OACpE,6BACC,4BAAKL,EAAMK,MACX,2BAAIL,EAAMG,WCCCG,EAPE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BACCA,EAAOC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAEE,GAAIX,MAAOS,SCS5BG,G,MAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,yBAAKb,UAAU,OACf,2BAAOA,UAAU,mCAChBc,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCIAI,G,MAVA,SAACC,GACd,OACE,yBAAKC,MAAO,CAACC,UAAW,SACZC,OAAQ,kBACRC,OAAQ,2BACjBJ,EAAMK,YCeEC,G,wDAnBb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,UAAU,GAHK,E,gEAQjBC,KAAKC,SAAS,CAAEF,UAAU,M,+BAI1B,OAAIC,KAAKF,MAAMC,SACN,4CAEAC,KAAKT,MAAMK,a,GAhBIM,cCiDbC,E,kDA3Cb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAb1C,EAAKV,MAAQ,CACXnB,OAAQ,GACR2B,YAAa,IAJH,E,gEAQO,IAAD,OAClBN,KAAKS,aAAaC,MAAK,SAAAC,GACrB,EAAKV,SAAS,CAAEtB,OAAQgC,S,mCAS1B,OAAOC,MAAM,8CAA8CF,MAAK,SAAA7B,GAC9D,OAAOA,EAAEgC,Y,+BAKH,IAAD,OACDC,EAAiBd,KAAKF,MAAMnB,OAAOoC,QAAO,SAAAlC,GAAC,OAC/CA,EAAEJ,KAAKuC,cAAcC,SACnB,EAAKnB,MAAMQ,YAAYU,kBAC3B,OACE,yBAAK3C,UAAU,KAAKmB,MAAO,CAAEC,UAAW,WACtC,wBAAIpB,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWa,aAAcc,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUzB,OAAQmC,W,GArCZZ,aCClBgB,IAASC,OACR,kBAAC,EAAD,MACAC,SAASC,eAAe,SPyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4ca0d1a9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './Card.css'\r\n\r\nconst Card = ({robot}) => {\r\n\treturn (\r\n\t\t<div className=\"bg-light-green dib br3 ma2 grow\tbw2 shadow-5 tc\">\r\n\t\t\t<img src={`https://robohash.org/${robot.email}?200x200`} alt={robot.name}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{robot.name}</h2>\r\n\t\t\t\t<p>{robot.email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../..//components/card/Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t{robots.map(r => <Card key={r.id} robot={r} />)}\r\n\t\t</div>)\r\n}\r\n\r\nexport default CardList","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox = ({searchField, searchChange}) => {\n  return (\n    <div className=\"pa2\">\n    <input className=\"pa3 ba b--green bg-lightest-blue\"\n     type=\"search\" \n     placeholder=\"search robots\"\n     onChange={searchChange}></input>\n    </div>\n  );\n};\n\n\nexport default SearchBox;\n","import React from 'react';\nimport './Scroll.css';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll',\n                border: '1px solid black',\n                height: 'calc(100vh - 190.42px)'}}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\nimport './ErrorBoundary.css';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch() {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Error result</h1>;\n    } else {\n      return this.props.children;\n    }\n  };\n}\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from '../card-list/CardList';\nimport SearchBox from '../SearchBox/SearchBox';\nimport Scroll from '../Scroll/Scroll';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    this.fetchUsers().then(users => {\n      this.setState({ robots: users });\n    })\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  }\n\n  fetchUsers() {\n    return fetch('https://jsonplaceholder.typicode.com/users').then(r => {\n      return r.json();\n    })\n  }\n\n\n  render() {\n    const filteredRobots = this.state.robots.filter(r =>\n      r.name.toLowerCase().includes(\n        this.state.searchfield.toLowerCase()));\n    return (\n      <div className=\"tc\" style={{ overflowY: 'hidden' }} >\n        <h1 className=\"f1\">Robofriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots}></CardList>\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './components/App/App';\n\n\nReactDOM.render(\n\t<App/>,\n\tdocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}